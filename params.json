{
  "name": "Tiny URLs",
  "tagline": "A Liferay plugin which provides tiny URLs for pages and a variety of content types",
  "body": "### Installation\r\nObtain the plugin binary package from the Liferay Marketplace and deploy using the Liferay control panel Apps page in the usual way.\r\n\r\nIf you have pre-existing content in your portal, tiny URLs for them will be automatically generated during portal startup. This operation may take some time to complete, depending on how much content you have on your portal. The portal will not come up until it has finished.\r\n\r\nFrom this point on, tiny URLs will be automatically generated when content is created or edited.\r\n\r\nThe resulting Tiny URLs have the format portal_url/t/xyzabc.\r\n\r\n### Usage\r\nA typical scenario goes like this:\r\n\r\n* A user navigates to a page, views a web content article, a messageboards message, etc.\r\n* On the page we display the tiny URL corresponding to what he is viewing.\r\n* The user sends the tiny URL to his friend.\r\n* The friend enters the tiny URL in his browser and sees exactly what the first user is seeing.\r\n\r\nTo display the tiny URL to users, a tool included in the plugin can be used. Most commonly, you would place a special web content article on the page.\r\n\r\nStep 1: Create a web content structure. It does not need to have any fields.\r\n\r\nStep 2: Create a template for the structure, such as the following Velocity code snippet:\r\n\r\n> \\#set ($tinyURLTools = $utilLocator.findUtil('tinyurl-portlet', 'org.hopeconsultants.portlet.tinyurl.util.TinyURLTools'))\r\n>\r\n> \\#set ($friendly_url = $request.get('attributes').get('FRIENDLY_URL'))\r\n> \\#set ($theme_display = $request.get('theme-display'))\r\n>\r\n> \\#set ($tiny_url = $tinyURLTools.getTinyURL($!friendly_url, $theme_display))\r\n>\r\n> \\<div\\> \\<label\\>Tiny URL for this article\\</label\\> \\<input onclick=\"Liferay.Util.selectAndCopy(this);\" readonly=\"true\" value=\"$!tiny_url\" /\\> \\</div\\>\r\n\r\nStep 3: Create a web content article using the template. It does not need to have any data.\r\n\r\nStep 4: Use a web content display to show the article on the pages you wish.\r\n\r\nSimilar code can be used a JSP page. Note that the TinyURLTools class expects the flattened ThemeDisplay object available in a web content template, so we have to construct one:\r\n> Object tinyURLToolsBean = PortletBeanLocatorUtil.locate(\"tinyurl-portlet\", \"org.hopeconsultants.portlet.tinyurl.util.TinyURLTools\");\r\n>\r\n> MethodKey getTinyURLMethodKey = new MethodKey(tinyURLToolsBean.getClass(), \"getTinyURL\", String.class, Map.class);\r\n>\r\n> Map<String, Object>flatThemeDisplay = new HashMap<String, Object>();\r\n>\r\n> flatThemeDisplay.put(\"server-name\", themeDisplay.getServerName());\r\n> flatThemeDisplay.put(\"plid\", plid);\r\n> flatThemeDisplay.put(\"url-portal\", themeDisplay.getURLPortal());\r\n>\r\n> String tinyURL = (String)getTinyURLMethodKey.getMethod().invoke(tinyURLToolsBean, DLUtil.getPreviewURL(fileEntry, null, null, StringPool.BLANK, false, true), flatThemeDisplay);\r\n\r\n#### Usage Example\r\nOn a page, place the special web content display and an asset publisher with default settings (i.e. dynamic mode, showing all your assets as abstracts).    \r\n\r\nWhen first visiting the page, the tiny URL corresponds to the page. When a user enters the tiny URL into his browser, he will be taken to the same page with the asset publisher showing the abstracts.\r\n\r\nIf you now click on an asset to show its full content, the tiny URL changes to correspond to that asset. When a user enters this tiny URL into his browser, he will be taken to the same page with the asset publisher showing that asset as full content.\r\n\r\n### Maintenance\r\nTo clean up the tiny URL database table, deleting orphaned entries and creating missing entries, add the following line to portal-ext.properties and restart the portal.\r\n\r\n> tinyurl.verify.on.startup=true\r\n\r\n### Supported content types and portlets\r\n* page\r\n* web content article - asset publisher\r\n* blogs entry - blogs portlet, asset publisher\r\n* documents and media file - asset publisher\r\n* messageboard category and message - messageboards portlet, asset publisher\r\n* wiki page - wiki portlet, asset publisher\r\n\r\nNotes:\r\n\r\n1: Not all the weird and wonderful formats of friendly URL are supported, only those which the portal provides in the FRIENDLY_URL request attribute.\r\n\r\n2: At present, Documents and Media and Documents and Media Display portlets are not supported. Use an Asset Publisher portlet instead.\r\n\r\n3: At present only site scope is supported.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}