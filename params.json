{
  "name": "Tiny URLs",
  "tagline": "A Liferay plugin which provides tiny URLs for pages and a variety of content types",
  "body": "### Installation\r\nObtain the plugin binary package from the Liferay Marketplace and deploy using the Liferay control panel Apps page in the usual way.\r\n\r\nIf you have pre-existing content in your portal, generate tiny URLs for them by restarting Liferay with the following entry in portal-ext.properties:\r\n> tinyurl.verify.on.startup=true\r\n\r\nThe operation may take some time to complete, depending on how much content you have on your portal. The portal will not come up until it has finished.\r\n\r\nNow remove the line and restart Liferay again. From this point on, tiny URLs will be automatically generated when content is created or edited.\r\n\r\nThis portal property can also be used as part of future maintenance to clean up the tiny URL database table, deleting orphaned entries and creating missing entries.\r\n\r\n### Usage\r\nA typical user scenario goes like this:\r\n\r\n* A user navigates to a page, views a web content article, messageboards message, etc.\r\n* On the page we display the tiny URL corresponding to what he is viewing.\r\n* The user sends the tiny URL to his friend.\r\n* The friend enters the tiny URL in his browser and sees exactly what the first user is seeing.\r\n\r\nTo display the tiny URL to users, a tool included in the plugin can be used. Most commonly, you would place a special web content article on the page which has no content but uses a template containing a code snippet such as the following example in Velocity:\r\n\r\n> \\#set ($tinyURLTools = $utilLocator.findUtil('tinyurl-portlet', 'org.hopeconsultants.portlet.tinyurl.util.TinyURLTools'))\r\n>\r\n> \\#set ($friendly_url = $request.get('attributes').get('FRIENDLY_URL'))\r\n> \\#set ($theme_display = $request.get('theme-display'))\r\n>\r\n> \\#set ($tiny_url = $tinyURLTools.getTinyURL($!friendly_url, $theme_display))\r\n>\r\n> \\<div\\> \\<input readonly=\"true\" value=\"$!tiny_url\" /\\> \\</div\\>\r\n\r\nThe resulting Tiny URLs have the format portal_url/t/xyzabc.\r\n\r\nSimilar code can be used a JSP page. Note that the TinyURLTools class expects the flattened ThemeDisplay object available in a web content template, so we have to construct one:\r\n> Object tinyURLToolsBean = PortletBeanLocatorUtil.locate(\"tinyurl-portlet\", \"org.hopeconsultants.portlet.tinyurl.util.TinyURLTools\");\r\n> \r\n> MethodKey getTinyURLMethodKey = new MethodKey(tinyURLToolsBean.getClass(), \"getTinyURL\", String.class, Map.class);\r\n>\r\n> Map<String, Object>flatThemeDisplay = new HashMap<String, Object>();\r\n>\r\n> flatThemeDisplay.put(\"server-name\", themeDisplay.getServerName());\r\n> flatThemeDisplay.put(\"plid\", plid);\r\n> flatThemeDisplay.put(\"url-portal\", themeDisplay.getURLPortal());\r\n>\r\n> String tinyURL = (String)getTinyURLMethodKey.getMethod().invoke(tinyURLToolsBean, DLUtil.getPreviewURL(fileEntry, null, null, StringPool.BLANK, false, true), flatThemeDisplay);\r\n\r\n### Supported content types\r\n* page\r\n* web content article\r\n* blogs entry\r\n* documents and media file\r\n* messageboard category\r\n* messageboard message\r\n* wiki page\r\n\r\nNote: not all the weird and wonderful formats of friendly URL are supported, only those which the portal provides in the FRIENDLY_URL request attribute.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}